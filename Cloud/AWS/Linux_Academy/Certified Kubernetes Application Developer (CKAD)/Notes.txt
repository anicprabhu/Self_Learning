CKAD - Linux_Academy | Lecture Notes

Installation of the cluster

Although installing and configuring a Kubernetes cluster is not one of the objectives for the CKAD exam, it is important to get some hand-on experirnce with the concepts covered in this course. Therefore, it is useful to have a Kubernetes cluster with which you can experiment and try out the things that will be covered throughout the course. This lesson will guide you through the process of building a basic cluster that you can experiment with as you proceed.
Lesson Reference

If you want to follow along, there is a reference for the commands used in this lesson below.
On all 3 servers

First, set up the Docker and Kubernetes repositories:

	sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

	sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

	curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

	cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
	deb https://apt.kubernetes.io/ kubernetes-xenial main
	EOF

Install Docker and Kubernetes packages:

Note that if you want to use a newer version of Kubernetes, change the version installed for kubelet, kubeadm, and kubectl. Make sure all three use the same version.

Note: There is currently a bug in Kubernetes 1.13.4 (and earlier) that can cause problems installaing the packages. Use 1.13.5-00 to avoid this issue.

	sudo apt-get update

	sudo apt-get install -y docker-ce=18.06.1~ce~3-0~ubuntu kubelet=1.13.5-00 kubeadm=1.13.5-00 kubectl=1.13.5-00

	sudo apt-get install -y docker-ce kubelet kubeadm kubectl

	sudo apt-mark hold docker-ce kubelet kubeadm kubectl

Enable iptables bridge call:

	echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf

	sudo sysctl -p

On the Kube master server

Initialize the cluster:

	sudo kubeadm init --pod-network-cidr=10.244.0.0/16

	Set up local kubeconfig:

	mkdir -p $HOME/.kube

	sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

	sudo chown $(id -u):$(id -g) $HOME/.kube/config

Install Flannel networking:

	kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml

Note: If you are using Kubernetes 1.16 or later, you will need to use a newer flannel installation yaml instead:

	kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/3f7d3e6c24f641e7ff557ebcea1136fdf4b1b6a1/Documentation/kube-flannel.yml

On each Kube node server

Join the node to the cluster. Do this by copying the provided line from the output when initializing the master node. Keep in mind that when copying the command, the system will add a newline character if it stretches over multiple lines in the web terminal. To get around this, copy the command to a text editor and make sure it fits on one entire line. It should look something like the following:

	sudo kubeadm join $controller_private_ip:6443 --token $token --discovery-token-ca-cert-hash $hash

On the Kube master server

Verify that all nodes are joined and ready:

	kubectl get nodes

You should see all three servers with a status of Ready:

NAME                      STATUS   ROLES    AGE   VERSION
wboyd1c.mylabserver.com   Ready    master   54m   v1.13.4
wboyd2c.mylabserver.com   Ready    <none>   49m   v1.13.4
wboyd3c.mylabserver.com   Ready    <none>   49m   v1.13.4

======================================================================================

Master

sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

sudo apt-get update

sudo apt-get install -y docker-ce kubelet kubeadm kubectl

echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf

sudo sysctl -p

sudo kubeadm init --pod-network-cidr=10.244.0.0/16

mkdir -p $HOME/.kube

sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/3f7d3e6c24f641e7ff557ebcea1136fdf4b1b6a1/Documentation/kube-flannel.yml	

Worker

sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

sudo apt-get update

sudo apt-get install -y docker-ce kubelet kubeadm kubectl

echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf

sudo sysctl -p
================
Minikube - Ububtu t2.Medium

--Install Kubectl

curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube

sudo mkdir -p /usr/local/bin/
sudo install minikube /usr/local/bin/

minikube start --driver=none

sudo mv /home/ubuntu/.kube /home/ubuntu/.minikube $HOME

sudo chown -R $USER $HOME/.kube $HOME/.minikube

=====================================================================================
Kubernetes API primitive

Kubernetes API primitive, also known as Kubernetes objects, are the basic building blocks of any application running in Kubernetes. Building and managing Kubernetes applications means working with objects. It is essential to be familiar with Kubernetes objects in order to develop applications for Kubernetes. In this lesson, we will discuss what Kubernetes objects are, and how to find information about objects in a cluster.
Relevant Documentation

    https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/

Lesson Reference

kubectl api-resources -o name

kubectl get pods -n kube-system

kubectl get nodes

kubectl get nodes <node_name>

kubectl get nodes <node_name> -o yaml

kubectl describe <object_type> <object_name>

kubectl get events

======================================WORKING SANITY================================================

git clone https://github.com/linuxacademy/eks-deep-dive-2019.git

cd eks-deep-dive-2019/2-LA1-Deploying-an-Application-to-EKS/

<Edit Service Type to be NodePort>

kubectl apply -f .

curl localhost:30939

=====================================================================================

Lecture: Creating Pods


Pods are one of the most essential Kubernetes object types. Most of the orchestration features of Kubernetes are centered around the management of Pods. In this lesson, we will discuss what Pods are and demonstrate how to create a pod. We will also talk about how to edit and delete pods after they are created. The principles discussed in this lesson for managing pods apply to the management of other types of Kubernetes objects as well.
Relevant Documentation

https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/
Lesson Reference

Create a new yaml file to contain the pod definition. Use whatever editor you like, but we used vi:

vi my-pod.yml

my-pod.yml:
---
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox
    command: ['sh', '-c', 'echo Hello Kubernetes! && sleep 3600']
---

apiVersion: v1
kind: Pod
metadata:
  name: my-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: nginx

---------

Create a pod from the yaml definition file:

kubectl create -f my-pod.yml

Edit a pod by updating the yaml definiton and re-applying it:

kubectl apply -f my-pod.yml

You can also edit a pod like this:

kubectl edit pod my-pod

You can delete a pod like this:

kubectl delete pod my-pod

==================================================================


Lecture: Namespaces

Although namespaces are not on the objectives list for the CKAD exam, they play an important role in many of the tasks that the exam may cover. An understanding of namespaces is necessary in order to avoid confusion in many scenarios that may arise when working with Kubernetes. In this lesson, we will briefly discuss namespaces, how to assign objects to namespaces, and how to browse objects within namespaces.
Relevant Documentation

    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/

Lesson Reference

You can get a list of the namespaces in the cluster like this:

kubectl get namespaces

You can also create your own namespaces.

kubectl create ns my-ns

To assign an object to a custom namespace, simply specify its metadata.namespace attribute.

apiVersion: v1
kind: Pod
metadata:
  name: my-ns-pod
  namespace: my-ns
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox
    command: ['sh', '-c', 'echo Hello Kubernetes! && sleep 3600']

Create the pod with the created yaml file.

kubectl create -f my-ns.yml

Use the -n flag to specify a namespace when using commands like kubectl get.

kubectl get pods -n my-ns

You can also use -n to specify a namespace when using kubectl describe.

kubectl describe pod my-ns-pod -n my-ns


====================================================

When building applications in Kubernetes, it is often necessary to provide some configuration for your containers. In this lesson we will discuss some frequently-used container configuration options: command, args, and containerPort. After completing this lesson, you will have a basic understanding of some the ways in which Kubernetes allows you to customize how your containers are run within a pod.
Relevant Documentation

    https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/

Lesson Reference

You can specify custom commands for your containers.

apiVersion: v1
kind: Pod
metadata:
  name: my-command-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox
    command: ['echo']
  restartPolicy: Never

You can also add custom arguments like so:

apiVersion: v1
kind: Pod
metadata:
  name: my-args-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox
    command: ['echo']
    args: ['This is my custom argument']
  restartPolicy: Never

Here is a pod with a containerPort:

apiVersion: v1
kind: Pod
metadata:
  name: my-containerport-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: nginx
    ports:
    - containerPort: 80

==================================================================







